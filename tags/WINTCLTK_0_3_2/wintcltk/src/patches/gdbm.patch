diff -Nbur gdbm-1.8.3.orig/README.Win32 gdbm-1.8.3/README.Win32
--- gdbm-1.8.3.orig/README.Win32	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/README.Win32	Tue Apr 22 08:40:56 2003
@@ -0,0 +1,15 @@
+GDBM 1.8.3 port to MinGW, VC++ and BCC32,
+by NAKAMURA Usaku <usa@osb.att.ne.jp>
+
+To build on a Windows machine:
+cd win32
+(n)make clean all examples
+
+To build static version on a Windows machine:
+cd win32
+(n)make DLL=0 clean all examples
+
+To use static library, define GDBM_STATIC before include headers.
+
+Web page:
+  http://jarp.jin.gr.jp/win32/
diff -Nbur gdbm-1.8.3.orig/gdbmerrno.c gdbm-1.8.3/gdbmerrno.c
--- gdbm-1.8.3.orig/gdbmerrno.c	Wed Jan 19 07:14:10 2000
+++ gdbm-1.8.3/gdbmerrno.c	Wed Apr 16 13:17:15 2003
@@ -33,6 +33,7 @@
 /* include system configuration before all else. */
 #include "autoconf.h"
 
+#include "gdbmdefs.h"
 #include "gdbmerrno.h"
 
 /* this is not static so that applications may access the array if they
diff -Nbur gdbm-1.8.3.orig/gdbmopen.c gdbm-1.8.3/gdbmopen.c
--- gdbm-1.8.3.orig/gdbmopen.c	Wed Jan 30 18:39:43 2002
+++ gdbm-1.8.3/gdbmopen.c	Tue Apr 15 09:52:26 2003
@@ -33,6 +33,10 @@
 #include "gdbmdefs.h"
 #include "gdbmerrno.h"
 
+#ifndef O_BINARY
+#define O_BINARY 0
+#endif
+
 /* Initialize dbm system.  FILE is a pointer to the file name.  If the file
    has a size of zero bytes, a file initialization procedure is performed,
    setting up the initial structure in the file.  BLOCK_SIZE is used during
@@ -126,20 +130,20 @@
   switch (flags & GDBM_OPENMASK)
     {
       case GDBM_READER:
-	dbf->desc = open (dbf->name, O_RDONLY, 0);
+	dbf->desc = open (dbf->name, O_RDONLY|O_BINARY, 0);
 	break;
 
       case GDBM_WRITER:
-	dbf->desc = open (dbf->name, O_RDWR, 0);
+	dbf->desc = open (dbf->name, O_RDWR|O_BINARY, 0);
 	break;
 
       case GDBM_NEWDB:
-	dbf->desc = open (dbf->name, O_RDWR|O_CREAT, mode);
+	dbf->desc = open (dbf->name, O_RDWR|O_CREAT|O_BINARY, mode);
 	need_trunc = TRUE;
 	break;
 
       default:
-	dbf->desc = open (dbf->name, O_RDWR|O_CREAT, mode);
+	dbf->desc = open (dbf->name, O_RDWR|O_CREAT|O_BINARY, mode);
 	break;
 
     }
diff -Nbur gdbm-1.8.3.orig/proto.h gdbm-1.8.3/proto.h
--- gdbm-1.8.3.orig/proto.h	Thu Aug  8 19:00:07 2002
+++ gdbm-1.8.3/proto.h	Wed Apr 16 14:08:13 2003
@@ -27,6 +27,16 @@
 *************************************************************************/
 
 
+#if defined(_WIN32) && !defined(GDBM_STATIC)
+# if defined(BUILDING_DLL)
+#  define GDBM_EXTERN extern __declspec(dllexport)
+# else
+#  define GDBM_EXTERN extern __declspec(dllimport)
+# endif
+#else
+# define GDBM_EXTERN extern
+#endif
+
 #ifndef __P
 #ifdef __STDC__
 #define __P(args) args
@@ -61,15 +71,41 @@
 int _gdbm_init_cache	__P((gdbm_file_info *, int));
 
 /* The user callable routines.... */
-void  gdbm_close	  __P((gdbm_file_info *));
-int   gdbm_delete	  __P((gdbm_file_info *, datum));
-datum gdbm_fetch	  __P((gdbm_file_info *, datum));
-gdbm_file_info *gdbm_open __P((char *, int, int, int, void (*) (void)));
-int   gdbm_reorganize	  __P((gdbm_file_info *));
-datum gdbm_firstkey       __P((gdbm_file_info *));
-datum gdbm_nextkey        __P((gdbm_file_info *, datum));
-int   gdbm_store          __P((gdbm_file_info *, datum, datum, int));
-int   gdbm_exists	  __P((gdbm_file_info *, datum));
-void  gdbm_sync		  __P((gdbm_file_info *));
-int   gdbm_setopt	  __P((gdbm_file_info *, int, int *, int));
-int   gdbm_fdesc	  __P((gdbm_file_info *));
+GDBM_EXTERN void  gdbm_close	      __P((gdbm_file_info *));
+GDBM_EXTERN int   gdbm_delete	      __P((gdbm_file_info *, datum));
+GDBM_EXTERN datum gdbm_fetch	      __P((gdbm_file_info *, datum));
+GDBM_EXTERN gdbm_file_info *gdbm_open __P((char *, int, int, int, void (*) (void)));
+GDBM_EXTERN int   gdbm_reorganize     __P((gdbm_file_info *));
+GDBM_EXTERN datum gdbm_firstkey	      __P((gdbm_file_info *));
+GDBM_EXTERN datum gdbm_nextkey	      __P((gdbm_file_info *, datum));
+GDBM_EXTERN int   gdbm_store	      __P((gdbm_file_info *, datum, datum, int));
+GDBM_EXTERN int   gdbm_exists	      __P((gdbm_file_info *, datum));
+GDBM_EXTERN void  gdbm_sync	      __P((gdbm_file_info *));
+GDBM_EXTERN int   gdbm_setopt	      __P((gdbm_file_info *, int, int *, int));
+GDBM_EXTERN int   gdbm_fdesc	      __P((gdbm_file_info *));
+
+GDBM_EXTERN const char *gdbm_version;
+GDBM_EXTERN int gdbm_errno;
+GDBM_EXTERN const char *gdbm_strerror __P((int));
+
+
+GDBM_EXTERN int	dbminit ();
+GDBM_EXTERN datum	fetch ();
+GDBM_EXTERN int	store ();
+GDBM_EXTERN int	delete ();
+GDBM_EXTERN datum	firstkey ();
+GDBM_EXTERN datum	nextkey ();
+GDBM_EXTERN int	dbmclose ();
+
+
+GDBM_EXTERN gdbm_file_info	*dbm_open ();
+GDBM_EXTERN void	 dbm_close ();
+GDBM_EXTERN datum	 dbm_fetch ();
+GDBM_EXTERN int	 dbm_store ();
+GDBM_EXTERN int	 dbm_delete ();
+GDBM_EXTERN int	 dbm_delete ();
+GDBM_EXTERN datum	 dbm_firstkey ();
+GDBM_EXTERN datum	 dbm_nextkey ();
+GDBM_EXTERN int	 dbm_dirfno ();
+GDBM_EXTERN int	 dbm_pagfno ();
+GDBM_EXTERN int	 dbm_rdonly ();
diff -Nbur gdbm-1.8.3.orig/version.c gdbm-1.8.3/version.c
--- gdbm-1.8.3.orig/version.c	Tue Oct 15 22:00:42 2002
+++ gdbm-1.8.3/version.c	Wed Apr 16 02:32:06 2003
@@ -27,6 +27,7 @@
 *************************************************************************/
 
 #include "autoconf.h"
+#include <gdbmdefs.h>
 
 /* Keep a string with the version number in it! */
 const char * gdbm_version = "GDBM version 1.8.3. 10/15/2002"
diff -Nbur gdbm-1.8.3.orig/win32/GNUmakefile gdbm-1.8.3/win32/GNUmakefile
--- gdbm-1.8.3.orig/win32/GNUmakefile	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/GNUmakefile	Wed Apr 16 14:08:13 2003
@@ -0,0 +1,235 @@
+# derived from GNU readline
+
+# Generated automatically from Makefile.in by configure.
+## -*- text -*- ##
+# Master Makefile for the GNU readline library.
+# Copyright (C) 1994, 1998 Free Software Foundation, Inc.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+GDBM_LIBRARY_VERSION = 1.8.3
+GDBM_LIBRARY_NAME = gdbm
+
+srcdir = ..
+winsrcdir = .
+VPATH = ..
+top_srcdir = ..
+BUILD_DIR = .
+
+INSTALL = install -c
+INSTALL_PROGRAM = $(INSTALL)
+INSTALL_DATA = $(INSTALL) -m 644
+
+CC = gcc -mno-cygwin
+AR = ar
+ARFLAGS = rcs
+RM = rm -f
+CP = cp
+MV = mv
+
+ifeq ($(DLL), 0)
+  TARGET = static
+else
+  TARGET = shared
+  DLL = 1
+endif
+
+SHELL = /bin/sh
+
+prefix = /usr/local
+exec_prefix = $(prefix)
+
+bindir = $(exec_prefix)/bin
+libdir = $(exec_prefix)/lib
+mandir = $(prefix)/man
+includedir = $(prefix)/include
+
+infodir = $(prefix)/info
+
+man3dir = $(mandir)/man3
+
+# Programs to make tags files.
+ETAGS = etags -tw
+CTAGS = ctags -tw
+
+CFLAGS = -Os
+LOCAL_CFLAGS =
+CPPFLAGS = 
+
+DEFS = 
+LOCAL_DEFS = -DGDBM_STATIC
+
+# For libraries which include headers from other libraries.
+INCLUDES = -I$(winsrcdir) -I$(srcdir)
+
+CCFLAGS = $(DEFS) $(LOCAL_DEFS) $(CPPFLAGS) $(INCLUDES) $(LOCAL_CFLAGS) $(CFLAGS)
+
+.c.o:
+	$(CC) -c $(CCFLAGS) $<
+
+# The name of the main library target.
+LIBRARY_NAME = libgdbm-static.a
+STATIC_LIBS = libgdbm-static.a
+
+# The C code source files for this library.
+SRCS =	$(srcdir)/bucket.c $(srcdir)/close.c $(srcdir)/dbmclose.c \
+	$(srcdir)/dbmdelete.c $(srcdir)/dbmdirfno.c $(srcdir)/dbmfetch.c \
+	$(srcdir)/dbminit.c $(srcdir)/dbmopen.c $(srcdir)/dbmpagfno.c \
+	$(srcdir)/dbmrdonly.c $(srcdir)/dbmseq.c $(srcdir)/dbmstore.c \
+	$(srcdir)/delete.c $(srcdir)/falloc.c $(srcdir)/fetch.c \
+	$(srcdir)/findkey.c $(srcdir)/gdbmclose.c $(srcdir)/gdbmdelete.c \
+	$(srcdir)/gdbmerrno.c $(srcdir)/gdbmexists.c $(srcdir)/gdbmfdesc.c \
+	$(srcdir)/gdbmfetch.c $(srcdir)/gdbmopen.c $(srcdir)/gdbmreorg.c \
+	$(srcdir)/gdbmseq.c $(srcdir)/gdbmsetopt.c $(srcdir)/gdbmstore.c \
+	$(srcdir)/gdbmsync.c $(srcdir)/global.c $(srcdir)/hash.c \
+	$(srcdir)/seq.c $(srcdir)/store.c $(srcdir)/update.c \
+	$(srcdir)/version.c $(winsrcdir)/win32.c
+
+# The header files for this library.
+HDRS =	$(srcdir)/dbm.h $(srcdir)/extern.h $(srcdir)/gdbmconst.h \
+	$(srcdir)/gdbmdefs.h $(srcdir)/gdbmerrno.h $(srcdir)/getopt.h \
+	$(srcdir)/ndbm.h $(srcdir)/proto.h $(srcdir)/systems.h \
+	$(winsrcdir)/gdbm.h $(winsrcdir)/autoconf.h
+
+OBJS =	bucket.o close.o dbmclose.o dbmdelete.o dbmdirfno.o \
+	dbmfetch.o dbminit.o dbmopen.o dbmpagfno.o dbmrdonly.o \
+	dbmseq.o dbmstore.o delete.o falloc.o fetch.o findkey.o \
+	gdbmclose.o gdbmdelete.o gdbmerrno.o gdbmexists.o \
+	gdbmfdesc.o gdbmfetch.o gdbmopen.o gdbmreorg.o gdbmseq.o \
+	gdbmsetopt.o gdbmstore.o gdbmsync.o global.o hash.o \
+	seq.o store.o update.o version.o win32.o
+
+CREATED_MAKEFILES = Makefile shlib/Makefile
+CREATED_CONFIGURE = config.status config.h config.cache config.log \
+		    stamp-config stamp-h
+CREATED_TAGS = TAGS tags
+
+INSTALLED_HEADERS = dbm.h ndbm.h gdbm.h
+
+##########################################################################
+
+all: $(TARGET)
+
+install: install-$(TARGET)
+
+uninstall: uninstall-$(TARGET)
+
+static: $(STATIC_LIBS)
+
+libgdbm-static.a: $(OBJS)
+	$(RM) $@
+	$(AR) $(ARFLAGS) $@ $(OBJS)
+
+shared:	force
+	-test -d shlib || mkdir shlib
+	-( cd shlib ; $(MAKE) $(MFLAGS) all )
+
+examples:	force
+	-test -d examples || mkdir examples
+	-( cd examples ; $(MAKE) $(MFLAGS) all )
+
+force:
+
+install-static: installdirs $(STATIC_LIBS)
+	$(INSTALL_DATA) $(srcdir)/dbm.h $(includedir)
+	$(INSTALL_DATA) $(srcdir)/ndbm.h $(includedir)
+	$(INSTALL_DATA) $(winsrcdir)/gdbm.h $(includedir)
+	-( if test -f $(libdir)/libgdbm-static.a ; then $(MV) $(libdir)/libgdbm-static.a $(libdir)/libgdbm-static.old; fi )
+	$(INSTALL_DATA) libgdbm-static.a $(libdir)/libgdbm-static.a
+	-test -n "$(RANLIB)" && $(RANLIB) -t $(libdir)/libgdbm-static.a
+
+installdirs:
+	-test -n "$(includedir)" && -test -d $(includedir) || \
+		mkdir -p $(includedir)
+	-test -n "$(libdir)" && -test -d $(libdir) || \
+		mkdir -p $(libdir)
+
+uninstall-static:
+	-test -n "$(includedir)" && cd $(includedir) && \
+		$(RM) $(INSTALLED_HEADERS)
+	-test -n "$(libdir)" && cd $(libdir) && \
+		$(RM) libgdbm-static.a libgdbm-static.old $(SHARED_LIBS)
+
+install-shared: installdirs shared
+	-( cd shlib ; $(MAKE) $(MFLAGS) install )
+
+uninstall-shared:
+	-( cd shlib; $(MAKE) $(MFLAGS) uninstall )
+
+TAGS:	force
+	$(ETAGS) $(CSOURCES) $(HSOURCES)
+
+tags:	force
+	$(CTAGS) $(CSOURCES) $(HSOURCES)
+
+clean:	force
+	$(RM) *.o *~ $(STATIC_LIBS)
+	-( cd shlib && $(MAKE) $(MFLAGS) $@ )
+#	-( cd doc && $(MAKE) $(MFLAGS) $@ )
+	-( cd examples && $(MAKE) $(MFLAGS) $@ )
+
+info dvi:
+	-( cd doc && $(MAKE) $(MFLAGS) $@ )
+
+install-info:
+check:
+installcheck:
+
+dist:   force
+	@echo Readline distributions are created using $(srcdir)/support/mkdist.
+	@echo Here is a sample of the necessary commands:
+	@echo bash $(srcdir)/support/mkdist -m $(srcdir)/MANIFEST -s $(srcdir) -r $(GDBM_LIBRARY_NAME)-$(GDBM_LIBRARY_VERSION)
+	@echo tar cf $(GDBM_LIBRARY_NAME)-$(GDBM_LIBRARY_VERSION).tar $(GDBM_LIBRARY_NAME)-$(GDBM_LIBRARY_VERSION)
+	@echo gzip $(GDBM_LIBRARY_NAME)-$(GDBM_LIBRARY_VERSION).tar
+
+# Tell versions [3.59,3.63) of GNU make not to export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
+
+## depends (FIX ME!!!)
+bucket.o: $(srcdir)/bucket.c $(winsrcdir)/autoconf.h
+close.o: $(srcdir)/close.c $(winsrcdir)/autoconf.h
+dbmclose.o: $(srcdir)/dbmclose.c $(winsrcdir)/autoconf.h
+dbmdelete.o: $(srcdir)/dbmdelete.c $(winsrcdir)/autoconf.h
+dbmdirfno.o: $(srcdir)/dbmdirfno.c $(winsrcdir)/autoconf.h
+dbmfetch.o: $(srcdir)/dbmfetch.c $(winsrcdir)/autoconf.h
+dbminit.o: $(srcdir)/dbminit.c $(winsrcdir)/autoconf.h
+dbmopen.o: $(srcdir)/dbmopen.c $(winsrcdir)/autoconf.h
+dbmpagfno.o: $(srcdir)/dbmpagfno.c $(winsrcdir)/autoconf.h
+dbmrdonly.o: $(srcdir)/dbmrdonly.c $(winsrcdir)/autoconf.h
+dbmseq.o: $(srcdir)/dbmseq.c $(winsrcdir)/autoconf.h
+dbmstore.o: $(srcdir)/dbmstore.c $(winsrcdir)/autoconf.h
+delete.o: $(srcdir)/delete.c $(winsrcdir)/autoconf.h
+falloc.o: $(srcdir)/falloc.c $(winsrcdir)/autoconf.h
+fetch.o: $(srcdir)/fetch.c $(winsrcdir)/autoconf.h
+findkey.o: $(srcdir)/findkey.c $(winsrcdir)/autoconf.h
+gdbmclose.o: $(srcdir)/gdbmclose.c $(winsrcdir)/autoconf.h
+gdbmdelete.o: $(srcdir)/gdbmdelete.c $(winsrcdir)/autoconf.h
+gdbmerrno.o: $(srcdir)/gdbmerrno.c $(winsrcdir)/autoconf.h
+gdbmexists.o: $(srcdir)/gdbmexists.c $(winsrcdir)/autoconf.h
+gdbmfdesc.o: $(srcdir)/gdbmfdesc.c $(winsrcdir)/autoconf.h
+gdbmfetch.o: $(srcdir)/gdbmfetch.c $(winsrcdir)/autoconf.h
+gdbmopen.o: $(srcdir)/gdbmopen.c $(winsrcdir)/autoconf.h
+gdbmreorg.o: $(srcdir)/gdbmreorg.c $(winsrcdir)/autoconf.h
+gdbmseq.o: $(srcdir)/gdbmseq.c $(winsrcdir)/autoconf.h
+gdbmsetopt.o: $(srcdir)/gdbmsetopt.c $(winsrcdir)/autoconf.h
+gdbmstore.o: $(srcdir)/gdbmstore.c $(winsrcdir)/autoconf.h
+gdbmsync.o: $(srcdir)/gdbmsync.c $(winsrcdir)/autoconf.h
+global.o: $(srcdir)/global.c $(winsrcdir)/autoconf.h
+hash.o: $(srcdir)/hash.c $(winsrcdir)/autoconf.h
+seq.o: $(srcdir)/seq.c $(winsrcdir)/autoconf.h
+store.o: $(srcdir)/store.c $(winsrcdir)/autoconf.h
+update.o: $(srcdir)/update.c $(winsrcdir)/autoconf.h
+version.o: $(srcdir)/version.c $(winsrcdir)/autoconf.h
+win32.o: $(winsrcdir)/win32.c $(winsrcdir)/autoconf.h
diff -Nbur gdbm-1.8.3.orig/win32/Makefile gdbm-1.8.3/win32/Makefile
--- gdbm-1.8.3.orig/win32/Makefile	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/Makefile	Thu Apr 17 00:05:15 2003
@@ -0,0 +1,203 @@
+# Makefile of GDBM for VC++ and BCC
+srcdir = ..
+winsrcdir = .
+
+INSTALL = copy
+INSTALL_PROGRAM = $(INSTALL)
+INSTALL_DATA = $(INSTALL)
+
+!ifdef __MAKE__
+CC = bcc32 -q
+AR = tlib
+ARFLAGS = /a
+MAKE = make
+CFLAGS = -w-
+LOCAL_CFLAGS = 
+CPPFLAGS = 
+!else
+CC = cl -nologo
+AR = lib
+ARFLAGS = -out:
+MAKE = nmake
+CFLAGS = -MD
+LOCAL_CFLAGS =
+CPPFLAGS = 
+!endif
+
+!if "$(DLL)" == "0"
+TARGET = static
+!else
+TARGET = shared
+DLL = 1
+!endif
+
+RM = del
+CP = copy
+MV = mv
+
+!ifndef prefix
+prefix = /usr/local
+!endif
+exec_prefix = $(prefix)
+
+bindir = $(exec_prefix)/bin
+libdir = $(exec_prefix)/lib
+mandir = $(prefix)/man
+includedir = $(prefix)/include
+
+infodir = $(prefix)/info
+
+man3dir = $(mandir)/man3
+
+
+DEFS =
+LOCAL_DEFS = -DGDBM_STATIC
+
+# For libraries which include headers from other libraries.
+INCLUDES = -I$(winsrcdir) -I$(srcdir) -I$(includedir)
+
+CCFLAGS = $(DEFS) $(LOCAL_DEFS) $(CPPFLAGS) $(INCLUDES:/=\) $(LOCAL_CFLAGS) $(CFLAGS)
+
+.c.obj:
+	$(CC) -c $(CCFLAGS) $<
+
+{$(winsrcdir)}.c.obj:
+	$(CC) -c $(CCFLAGS) $<
+
+{$(srcdir)}.c.obj:
+	$(CC) -c $(CCFLAGS) $<
+
+# The name of the main library target.
+LIBRARY_NAME = gdbm-static.lib
+STATIC_LIBS = gdbm-static.lib
+
+# The C code source files for this library.
+SRCS =	$(srcdir)/bucket.c $(srcdir)/close.c $(srcdir)/dbmclose.c \
+	$(srcdir)/dbmdelete.c $(srcdir)/dbmdirfno.c $(srcdir)/dbmfetch.c \
+	$(srcdir)/dbminit.c $(srcdir)/dbmopen.c $(srcdir)/dbmpagfno.c \
+	$(srcdir)/dbmrdonly.c $(srcdir)/dbmseq.c $(srcdir)/dbmstore.c \
+	$(srcdir)/delete.c $(srcdir)/falloc.c $(srcdir)/fetch.c \
+	$(srcdir)/findkey.c $(srcdir)/gdbmclose.c $(srcdir)/gdbmdelete.c \
+	$(srcdir)/gdbmerrno.c $(srcdir)/gdbmexists.c $(srcdir)/gdbmfdesc.c \
+	$(srcdir)/gdbmfetch.c $(srcdir)/gdbmopen.c $(srcdir)/gdbmreorg.c \
+	$(srcdir)/gdbmseq.c $(srcdir)/gdbmsetopt.c $(srcdir)/gdbmstore.c \
+	$(srcdir)/gdbmsync.c $(srcdir)/global.c $(srcdir)/hash.c \
+	$(srcdir)/seq.c $(srcdir)/store.c $(srcdir)/update.c \
+	$(srcdir)/version.c $(winsrcdir)/win32.c
+
+HDRS =	$(srcdir)/dbm.h $(srcdir)/extern.h $(srcdir)/gdbmconst.h \
+	$(srcdir)/gdbmdefs.h $(srcdir)/gdbmerrno.h $(srcdir)/getopt.h \
+	$(srcdir)/ndbm.h $(srcdir)/proto.h $(srcdir)/systems.h \
+	$(winsrcdir)/gdbm.h $(winsrcdir)/autoconf.h
+
+OBJS =	bucket.obj close.obj dbmclose.obj dbmdelete.obj dbmdirfno.obj \
+	dbmfetch.obj dbminit.obj dbmopen.obj dbmpagfno.obj dbmrdonly.obj \
+	dbmseq.obj dbmstore.obj delete.obj falloc.obj fetch.obj findkey.obj \
+	gdbmclose.obj gdbmdelete.obj gdbmerrno.obj gdbmexists.obj \
+	gdbmfdesc.obj gdbmfetch.obj gdbmopen.obj gdbmreorg.obj gdbmseq.obj \
+	gdbmsetopt.obj gdbmstore.obj gdbmsync.obj global.obj hash.obj \
+	seq.obj store.obj update.obj version.obj win32.obj
+
+INSTALLED_HEADERS = dbm.h ndbm.h gdbm.h
+
+##########
+
+all: $(TARGET)
+
+install: install-$(TARGET)
+
+uninstall: uninstall-$(TARGET)
+
+static: $(STATIC_LIBS)
+
+shared:	force
+	cd shlib
+	$(MAKE) -$(MAKEFLAGS) prefix=$(prefix) all
+	cd ..
+
+gdbm-static.lib: $(OBJS)
+	if exist $@ $(RM) $@
+	$(AR) $(ARFLAGS)"$@" $(OBJS)
+
+force: nul
+
+install-static: installdirs $(STATIC_LIBS)
+	$(INSTALL_DATA) $(LIBRARY_NAME) $(libdir:/=\) /Y >nul
+	$(INSTALL_DATA) $(srcdir:/=\)\dbm.h $(includedir:/=\) /y >nul
+	$(INSTALL_DATA) $(srcdir:/=\)\ndbm.h $(includedir:/=\) /y >nul
+	$(INSTALL_DATA) $(winsrcdir:/=\)\gdbm.h $(includedir:/=\) /y >nul
+
+installdirs:
+	-if not exist $(includedir:/=\)\nul mkdir $(includedir:/=\)
+	-if not exist $(libdir:/=\)\nul mkdir $(libdir:/=\)
+
+uninstall-static:
+	for %i in ($(INSTALLED_HEADERS)) do @del $(includedir:/=\)\%i >nul
+	cd $(libdir:/=\)
+	$(RM) $(LIBRARY_NAME)
+
+install-shared: installdirs shared
+	cd shlib
+	$(MAKE) -$(MAKEFLAGS) prefix=$(prefix) install
+	cd ..
+
+uninstall-shared:
+	cd shlib
+	$(MAKE) -$(MAKEFLAGS) prefix=$(prefix) uninstall
+	cd ..
+
+TAGS:	force
+	$(ETAGS) $(CSOURCES) $(HSOURCES)
+
+clean:	force
+	if exist *.obj $(RM) *.obj
+	if exist *~ $(RM) *~
+	if exist *.lib $(RM) *.lib
+	cd shlib
+	-$(MAKE) -$(MAKEFLAGS) prefix=$(prefix) $@
+	cd ..
+	cd examples
+	-$(MAKE) -$(MAKEFLAGS) prefix=$(prefix) $@
+	cd ..
+
+examples: force
+	cd examples
+	$(MAKE) -$(MAKEFLAGS) DLL=$(DLL) prefix=$(prefix) all
+	cd ..
+
+## depends (FIX ME!!!)
+bucket.obj: {$(srcdir)}bucket.c {$(winsrcdir)}autoconf.h
+close.obj: {$(srcdir)}close.c {$(winsrcdir)}autoconf.h
+dbmclose.obj: {$(srcdir)}dbmclose.c {$(winsrcdir)}autoconf.h
+dbmdelete.obj: {$(srcdir)}dbmdelete.c {$(winsrcdir)}autoconf.h
+dbmdirfno.obj: {$(srcdir)}dbmdirfno.c {$(winsrcdir)}autoconf.h
+dbmfetch.obj: {$(srcdir)}dbmfetch.c {$(winsrcdir)}autoconf.h
+dbminit.obj: {$(srcdir)}dbminit.c {$(winsrcdir)}autoconf.h
+dbmopen.obj: {$(srcdir)}dbmopen.c {$(winsrcdir)}autoconf.h
+dbmpagfno.obj: {$(srcdir)}dbmpagfno.c {$(winsrcdir)}autoconf.h
+dbmrdonly.obj: {$(srcdir)}dbmrdonly.c {$(winsrcdir)}autoconf.h
+dbmseq.obj: {$(srcdir)}dbmseq.c {$(winsrcdir)}autoconf.h
+dbmstore.obj: {$(srcdir)}dbmstore.c {$(winsrcdir)}autoconf.h
+delete.obj: {$(srcdir)}delete.c {$(winsrcdir)}autoconf.h
+falloc.obj: {$(srcdir)}falloc.c {$(winsrcdir)}autoconf.h
+fetch.obj: {$(srcdir)}fetch.c {$(winsrcdir)}autoconf.h
+findkey.obj: {$(srcdir)}findkey.c {$(winsrcdir)}autoconf.h
+gdbmclose.obj: {$(srcdir)}gdbmclose.c {$(winsrcdir)}autoconf.h
+gdbmdelete.obj: {$(srcdir)}gdbmdelete.c {$(winsrcdir)}autoconf.h
+gdbmerrno.obj: {$(srcdir)}gdbmerrno.c {$(winsrcdir)}autoconf.h
+gdbmexists.obj: {$(srcdir)}gdbmexists.c {$(winsrcdir)}autoconf.h
+gdbmfdesc.obj: {$(srcdir)}gdbmfdesc.c {$(winsrcdir)}autoconf.h
+gdbmfetch.obj: {$(srcdir)}gdbmfetch.c {$(winsrcdir)}autoconf.h
+gdbmopen.obj: {$(srcdir)}gdbmopen.c {$(winsrcdir)}autoconf.h
+gdbmreorg.obj: {$(srcdir)}gdbmreorg.c {$(winsrcdir)}autoconf.h
+gdbmseq.obj: {$(srcdir)}gdbmseq.c {$(winsrcdir)}autoconf.h
+gdbmsetopt.obj: {$(srcdir)}gdbmsetopt.c {$(winsrcdir)}autoconf.h
+gdbmstore.obj: {$(srcdir)}gdbmstore.c {$(winsrcdir)}autoconf.h
+gdbmsync.obj: {$(srcdir)}gdbmsync.c {$(winsrcdir)}autoconf.h
+global.obj: {$(srcdir)}global.c {$(winsrcdir)}autoconf.h
+hash.obj: {$(srcdir)}hash.c {$(winsrcdir)}autoconf.h
+seq.obj: {$(srcdir)}seq.c {$(winsrcdir)}autoconf.h
+store.obj: {$(srcdir)}store.c {$(winsrcdir)}autoconf.h
+update.obj: {$(srcdir)}update.c {$(winsrcdir)}autoconf.h
+version.obj: {$(srcdir)}version.c {$(winsrcdir)}autoconf.h
+win32.obj: {$(winsrcdir)}win32.c {$(winsrcdir)}autoconf.h
diff -Nbur gdbm-1.8.3.orig/win32/autoconf.h gdbm-1.8.3/win32/autoconf.h
--- gdbm-1.8.3.orig/win32/autoconf.h	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/autoconf.h	Tue Apr 15 09:52:27 2003
@@ -0,0 +1,32 @@
+/* #undef HAVE_BCOPY */
+/* #undef HAVE_DLFCN_H */
+#define HAVE_FCNTL_H 1
+#define HAVE_FLOCK 1
+#define HAVE_FSYNC 1
+/* #undef HAVE_FTRUNCATE */
+/* #undef HAVE_GETOPT */
+#define HAVE_INTTYPES_H 1
+/* #undef HAVE_LIBDBM */
+/* #undef HAVE_LIBNDBM */
+#define HAVE_MEMORY_H 1
+#define HAVE_RENAME 1
+#define HAVE_STDINT_H 1
+#define HAVE_STDLIB_H 1
+#define HAVE_STRINGS_H 1
+#define HAVE_STRING_H 1
+/* #undef HAVE_STRUCT_STAT_ST_BLKSIZE */
+/* #undef HAVE_ST_BLKSIZE */
+/* #undef HAVE_SYS_FILE_H */
+#define HAVE_SYS_STAT_H 1
+#define HAVE_SYS_TYPES_H 1
+/* #undef HAVE_UNISTD_H */
+#define PACKAGE_BUGREPORT ""
+#define PACKAGE_NAME "gdbm"
+#define PACKAGE_STRING "gdbm 1.8.3"
+#define PACKAGE_TARNAME "gdbm"
+#define PACKAGE_VERSION "1.8.3"
+#define STDC_HEADERS 1
+/* #undef const */
+/* #undef off_t */
+
+#define alloca _alloca
diff -Nbur gdbm-1.8.3.orig/win32/examples/GNUmakefile gdbm-1.8.3/win32/examples/GNUmakefile
--- gdbm-1.8.3.orig/win32/examples/GNUmakefile	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/examples/GNUmakefile	Wed Apr 16 14:08:13 2003
@@ -0,0 +1,67 @@
+# Makefile of GDBM for mingw
+srcdir = ../..
+winsrcdir = ..
+
+CC = gcc -mno-cygwin
+AR = ar
+ARFLAGS = rcs
+RM = rm -f
+CP = cp
+MV = mv
+
+CFLAGS = -Os
+LOCAL_CFLAGS = 
+CPPFLAGS = 
+
+ifeq ($(DLL), 0)
+  LOCAL_DEFS = -DGDBM_STATIC
+  LIBS = -lgdbm-statlic
+else
+  LOCAL_DEFS = 
+  LIBS = -lgdbm
+endif
+
+prefix = /usr/local
+exec_prefix = $(prefix)
+
+bindir = $(exec_prefix)/bin
+libdir = $(exec_prefix)/lib
+mandir = $(prefix)/man
+includedir = $(prefix)/include
+
+infodir = $(prefix)/info
+
+man3dir = $(mandir)/man3
+
+
+DEFS =
+
+# For libraries which include headers from other libraries.
+INCLUDES = -I$(winsrcdir) -I$(srcdir) -I$(includedir)
+
+CCFLAGS = $(DEFS) $(LOCAL_DEFS) $(CPPFLAGS) $(INCLUDES:/=\) $(LOCAL_CFLAGS) $(CFLAGS)
+
+.c.o:
+	$(CC) -c $(CCFLAGS) $<
+
+# The name of the main library target.
+
+EXAMPLES = dbmtest.exe ndbmtest.exe gdbmtest.exe
+
+##########
+
+all: $(EXAMPLES)
+
+dbmtest.exe: dbmtest.o
+	$(CC) $(CCFLAGS) -o $@ dbmtest.o $(LIBS)
+
+ndbmtest.exe: ndbmtest.o
+	$(CC) $(CCFLAGS) -o $@ ndbmtest.o $(LIBS)
+
+gdbmtest.exe: gdbmtest.o
+	$(CC) $(CCFLAGS) -o $@ gdbmtest.o $(LIBS)
+
+force: nul
+
+clean:	force
+	$(RM) *.o $(EXAMPLES) testdb*
diff -Nbur gdbm-1.8.3.orig/win32/examples/Makefile gdbm-1.8.3/win32/examples/Makefile
--- gdbm-1.8.3.orig/win32/examples/Makefile	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/examples/Makefile	Wed Apr 16 14:08:13 2003
@@ -0,0 +1,95 @@
+# Makefile of GDBM for VC++ and BCC
+srcdir = ../..
+winsrcdir = ..
+
+INSTALL = copy
+INSTALL_PROGRAM = $(INSTALL)
+INSTALL_DATA = $(INSTALL)
+
+!ifdef __MAKE__
+CC = bcc32 -q
+AR = tlib
+ARFLAGS = /a
+MAKE = make
+CFLAGS = -w-
+LOCAL_CFLAGS = 
+CPPFLAGS = 
+!else
+CC = cl -nologo
+AR = lib
+ARFLAGS = -out:
+MAKE = nmake
+CFLAGS = -MD
+LOCAL_CFLAGS =
+CPPFLAGS = 
+!endif
+
+!if "$(DLL)" == "0"
+LOCAL_DEFS =  -DGDBM_STATIC
+LIBS = gdbm-static.lib
+!else
+LOCAL_DEFS =
+LIBS = gdbm.lib
+!endif
+
+RM = del
+CP = copy
+MV = mv
+
+!ifndef prefix
+prefix = /usr/local
+!endif
+exec_prefix = $(prefix)
+
+bindir = $(exec_prefix)/bin
+libdir = $(exec_prefix)/lib
+mandir = $(prefix)/man
+includedir = $(prefix)/include
+
+infodir = $(prefix)/info
+
+man3dir = $(mandir)/man3
+
+
+DEFS =
+
+# For libraries which include headers from other libraries.
+INCLUDES = -I$(winsrcdir) -I$(srcdir) -I$(includedir)
+
+CCFLAGS = $(DEFS) $(LOCAL_DEFS) $(CPPFLAGS) $(INCLUDES:/=\) $(LOCAL_CFLAGS) $(CFLAGS)
+
+.c.obj:
+	$(CC) -c $(CCFLAGS) $<
+
+{$(winsrcdir)}.c.obj:
+	$(CC) -c $(CCFLAGS) $<
+
+{$(srcdir)}.c.obj:
+	$(CC) -c $(CCFLAGS) $<
+
+# The name of the main library target.
+
+EXAMPLES = dbmtest.exe ndbmtest.exe gdbmtest.exe
+
+##########
+
+all: $(EXAMPLES)
+
+dbmtest.exe: dbmtest.obj
+	$(CC) $(CCFLAGS) dbmtest.obj $(LIBS)
+
+ndbmtest.exe: ndbmtest.obj
+	$(CC) $(CCFLAGS) ndbmtest.obj $(LIBS)
+
+gdbmtest.exe: gdbmtest.obj
+	$(CC) $(CCFLAGS) gdbmtest.obj $(LIBS)
+
+force: nul
+
+clean:	force
+	if exist *.obj $(RM) *.obj
+	if exist *.exp $(RM) *.exp
+	if exist *.tds $(RM) *.tds
+	if exist *~ $(RM) *~
+	if exist *.exe $(RM) *.exe
+	if exist testdb* $(RM) testdb*
diff -Nbur gdbm-1.8.3.orig/win32/examples/dbmtest.c gdbm-1.8.3/win32/examples/dbmtest.c
--- gdbm-1.8.3.orig/win32/examples/dbmtest.c	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/examples/dbmtest.c	Wed Apr 16 05:10:11 2003
@@ -0,0 +1,52 @@
+#include <fcntl.h>
+#include <stdio.h>
+#include <string.h>
+#include <dbm.h>
+
+
+#define set_datum(d, s) \
+    do { \
+	(d)->dptr = (s); \
+	(d)->dsize = strlen(s) + 1; \
+    } while (0)
+
+
+int main(void)
+{
+    int dbm;
+    datum key, val;
+
+    dbm = dbminit("testdb");
+    if (dbm < 0) {
+	int f;
+	f = creat("testdb.dir", 0666);
+	close(f);
+	f = creat("testdb.pag", 0666);
+	close(f);
+	dbm = dbminit("testdb");
+    }
+
+    key = firstkey();
+    if (key.dptr) {
+	do {
+	    val = fetch(key);
+	    printf("[%s] = [%s]\n", key.dptr, val.dptr);
+	    key = nextkey(key);
+	} while (key.dptr);
+    }
+    else {
+	set_datum(&key, "foobar");
+	set_datum(&val, "FB");
+	store(key, val);
+	set_datum(&key, "baz");
+	set_datum(&val, "BZ");
+	store(key, val);
+	set_datum(&key, "quux");
+	set_datum(&val, "QX");
+	store(key, val);
+    }
+
+    dbmclose(dbm);
+
+    return 0;
+}
diff -Nbur gdbm-1.8.3.orig/win32/examples/gdbmtest.c gdbm-1.8.3/win32/examples/gdbmtest.c
--- gdbm-1.8.3.orig/win32/examples/gdbmtest.c	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/examples/gdbmtest.c	Wed Apr 16 13:17:35 2003
@@ -0,0 +1,49 @@
+#include <stdio.h>
+#include <string.h>
+#include <gdbm.h>
+
+
+#define set_datum(d, s) \
+    do { \
+	(d)->dptr = (s); \
+	(d)->dsize = strlen(s) + 1; \
+    } while (0)
+
+
+int main(void)
+{
+    GDBM_FILE gdbm;
+    datum key, val;
+
+    printf("%s\n", gdbm_version);
+
+    gdbm = gdbm_open("testdb", 2048, GDBM_WRCREAT, 0666, NULL);
+
+    key = gdbm_firstkey(gdbm);
+    if (key.dptr) {
+	do {
+	    val = gdbm_fetch(gdbm, key);
+	    printf("[%s] = [%s]\n", key.dptr, val.dptr);
+	    key = gdbm_nextkey(gdbm, key);
+	} while (key.dptr);
+    }
+    else {
+	set_datum(&key, "foobar");
+	set_datum(&val, "FB");
+	gdbm_store(gdbm, key, val, GDBM_REPLACE);
+	gdbm_sync(gdbm);
+	set_datum(&key, "baz");
+	set_datum(&val, "BZ");
+	gdbm_store(gdbm, key, val, GDBM_REPLACE);
+	gdbm_sync(gdbm);
+	set_datum(&key, "quux");
+	set_datum(&val, "QX");
+	gdbm_store(gdbm, key, val, GDBM_REPLACE);
+	gdbm_sync(gdbm);
+    }
+    printf("[%d][%s]\n", gdbm_errno, gdbm_strerror(gdbm_errno));
+
+    gdbm_close(gdbm);
+
+    return 0;
+}
diff -Nbur gdbm-1.8.3.orig/win32/examples/ndbmtest.c gdbm-1.8.3/win32/examples/ndbmtest.c
--- gdbm-1.8.3.orig/win32/examples/ndbmtest.c	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/examples/ndbmtest.c	Wed Apr 16 05:10:11 2003
@@ -0,0 +1,44 @@
+#include <fcntl.h>
+#include <stdio.h>
+#include <string.h>
+#include <ndbm.h>
+
+
+#define set_datum(d, s) \
+    do { \
+	(d)->dptr = (s); \
+	(d)->dsize = strlen(s) + 1; \
+    } while (0)
+
+
+int main(void)
+{
+    DBM *dbm;
+    datum key, val;
+
+    dbm = dbm_open("testdb", O_RDWR | O_CREAT, 0666);
+
+    key = dbm_firstkey(dbm);
+    if (key.dptr) {
+	do {
+	    val = dbm_fetch(dbm, key);
+	    printf("[%s] = [%s]\n", key.dptr, val.dptr);
+	    key = dbm_nextkey(dbm, key);
+	} while (key.dptr);
+    }
+    else {
+	set_datum(&key, "foobar");
+	set_datum(&val, "FB");
+	dbm_store(dbm, key, val, DBM_REPLACE);
+	set_datum(&key, "baz");
+	set_datum(&val, "BZ");
+	dbm_store(dbm, key, val, DBM_REPLACE);
+	set_datum(&key, "quux");
+	set_datum(&val, "QX");
+	dbm_store(dbm, key, val, DBM_REPLACE);
+    }
+
+    dbm_close(dbm);
+
+    return 0;
+}
diff -Nbur gdbm-1.8.3.orig/win32/gdbm.h gdbm-1.8.3/win32/gdbm.h
--- gdbm-1.8.3.orig/win32/gdbm.h	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/gdbm.h	Wed Apr 16 14:08:13 2003
@@ -0,0 +1,149 @@
+/* gdbm.h  -  The include file for dbm users.  */
+
+/*  This file is part of GDBM, the GNU data base manager, by Philip A. Nelson.
+    Copyright (C) 1990, 1991, 1993  Free Software Foundation, Inc.
+
+    GDBM is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2, or (at your option)
+    any later version.
+
+    GDBM is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with GDBM; see the file COPYING.  If not, write to
+    the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+
+    You may contact the author by:
+       e-mail:  phil@cs.wwu.edu
+      us-mail:  Philip A. Nelson
+                Computer Science Department
+                Western Washington University
+                Bellingham, WA 98226
+       
+*************************************************************************/
+
+/* Protection for multiple includes. */
+#ifndef _GDBM_H_
+#define _GDBM_H_
+
+#if defined(_WIN32) && !defined(GDBM_STATIC)
+# if defined(BUILDING_DLL)
+#  define GDBM_EXTERN extern __declspec(dllexport)
+# else
+#  define GDBM_EXTERN extern __declspec(dllimport)
+# endif
+#else
+# define GDBM_EXTERN extern
+#endif
+
+/* Parameters to gdbm_open for READERS, WRITERS, and WRITERS who
+   can create the database. */
+#define  GDBM_READER  0		/* A reader. */
+#define  GDBM_WRITER  1		/* A writer. */
+#define  GDBM_WRCREAT 2		/* A writer.  Create the db if needed. */
+#define  GDBM_NEWDB   3		/* A writer.  Always create a new db. */
+#define  GDBM_FAST    0x10	/* Write fast! => No fsyncs.  OBSOLETE. */
+#define  GDBM_SYNC    0x20	/* Sync operations to the disk. */
+#define  GDBM_NOLOCK  0x40	/* Don't do file locking operations. */
+
+/* Parameters to gdbm_store for simple insertion or replacement in the
+   case that the key is already in the database. */
+#define  GDBM_INSERT  0		/* Never replace old data with new. */
+#define  GDBM_REPLACE 1		/* Always replace old data with new. */
+
+/* Parameters to gdbm_setopt, specifing the type of operation to perform. */
+#define  GDBM_CACHESIZE 1       /* Set the cache size. */
+#define  GDBM_FASTMODE  2       /* Toggle fast mode.  OBSOLETE. */
+#define  GDBM_SYNCMODE	3	/* Turn on or off sync operations. */
+#define  GDBM_CENTFREE  4	/* Keep all free blocks in the header. */
+#define  GDBM_COALESCEBLKS 5	/* Attempt to coalesce free blocks. */
+
+/* The data and key structure.  This structure is defined for compatibility. */
+typedef struct {
+	char *dptr;
+	int   dsize;
+      } datum;
+
+
+/* The file information header. This is good enough for most applications. */
+typedef struct {int dummy[10];} *GDBM_FILE;
+
+/* Determine if the C(++) compiler requires complete function prototype  */
+#ifndef __P
+#if defined(__STDC__) || defined(__cplusplus) || defined(c_plusplus) || defined(__BORLANDC__) || defined(_MSC_VER)
+#define __P(x) x
+#else
+#define __P(x) ()
+#endif
+#endif
+
+/* External variable, the gdbm build release string. */
+GDBM_EXTERN char *gdbm_version;
+
+
+/* GDBM C++ support */
+#if defined(__cplusplus) || defined(c_plusplus)
+extern "C" {
+#endif
+
+/* These are the routines! */
+
+GDBM_EXTERN GDBM_FILE gdbm_open __P((char *, int, int, int, void (*)()));
+GDBM_EXTERN void gdbm_close __P((GDBM_FILE));
+GDBM_EXTERN int gdbm_store __P((GDBM_FILE, datum, datum, int));
+GDBM_EXTERN datum gdbm_fetch __P((GDBM_FILE, datum));
+GDBM_EXTERN int gdbm_delete __P((GDBM_FILE, datum));
+GDBM_EXTERN datum gdbm_firstkey __P((GDBM_FILE));
+GDBM_EXTERN datum gdbm_nextkey __P((GDBM_FILE, datum));
+GDBM_EXTERN int gdbm_reorganize __P((GDBM_FILE));
+GDBM_EXTERN void gdbm_sync __P((GDBM_FILE));
+GDBM_EXTERN int gdbm_exists __P((GDBM_FILE, datum));
+GDBM_EXTERN int gdbm_setopt __P((GDBM_FILE, int, int *, int));
+GDBM_EXTERN int gdbm_fdesc __P((GDBM_FILE));
+
+#if defined(__cplusplus) || defined(c_plusplus)
+}
+#endif
+
+#define	GDBM_NO_ERROR		0
+#define	GDBM_MALLOC_ERROR	1
+#define	GDBM_BLOCK_SIZE_ERROR	2
+#define	GDBM_FILE_OPEN_ERROR	3
+#define	GDBM_FILE_WRITE_ERROR	4
+#define	GDBM_FILE_SEEK_ERROR	5
+#define	GDBM_FILE_READ_ERROR	6
+#define	GDBM_BAD_MAGIC_NUMBER	7
+#define	GDBM_EMPTY_DATABASE	8
+#define	GDBM_CANT_BE_READER	9
+#define	GDBM_CANT_BE_WRITER	10
+#define	GDBM_READER_CANT_DELETE	11
+#define	GDBM_READER_CANT_STORE	12
+#define	GDBM_READER_CANT_REORGANIZE	13
+#define	GDBM_UNKNOWN_UPDATE	14
+#define	GDBM_ITEM_NOT_FOUND	15
+#define	GDBM_REORGANIZE_FAILED	16
+#define	GDBM_CANNOT_REPLACE	17
+#define	GDBM_ILLEGAL_DATA	18
+#define	GDBM_OPT_ALREADY_SET	19
+#define	GDBM_OPT_ILLEGAL	20
+typedef int gdbm_error;		/* For compatibilities sake. */
+GDBM_EXTERN gdbm_error gdbm_errno;
+
+/* extra prototypes */
+
+/* GDBM C++ support */
+#if defined(__cplusplus) || defined(c_plusplus)
+extern "C" {
+#endif
+
+GDBM_EXTERN char *gdbm_strerror __P((gdbm_error));
+
+#if defined(__cplusplus) || defined(c_plusplus)
+}
+#endif
+
+#endif
diff -Nbur gdbm-1.8.3.orig/win32/shlib/GNUmakefile gdbm-1.8.3/win32/shlib/GNUmakefile
--- gdbm-1.8.3.orig/win32/shlib/GNUmakefile	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/shlib/GNUmakefile	Tue Apr 22 14:13:51 2003
@@ -0,0 +1,194 @@
+# derived from GNU readline
+
+# Copyright (C) 1998 Free Software Foundation, Inc.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+GDBM_LIBRARY_VERSION = 1.8.3
+GDBM_LIBRARY_NAME = gdbm
+
+srcdir = ../..
+winsrcdir = ..
+VPATH = .:..:../..
+includedir =
+BUILD_DIR = .
+
+INSTALL = install -c
+INSTALL_PROGRAM = $(INSTALL)
+INSTALL_DATA = $(INSTALL) -m 644
+
+RM = rm -f
+CP = cp
+MV = mv
+
+CFLAGS = -O3
+LOCAL_CFLAGS =
+CPPFLAGS = 
+LDFLAGS =  -s
+
+DEFS =
+LOCAL_DEFS = -DBUILDING_DLL
+
+prefix = /usr/local
+exec_prefix = $(prefix)
+
+bindir = $(exec_prefix)/bin
+libdir = $(exec_prefix)/lib
+mandir = $(prefix)/man
+includedir = $(prefix)/include
+
+infodir = $(prefix)/info
+
+man3dir = $(mandir)/man3
+
+#
+# These values are generated for configure by $(topdir)/support/shobj-conf.
+# If your system is not supported by that script, but includes facilities for
+# dynamic loading of shared objects, please update the script and send the
+# changes to bash-maintainers@gnu.org.
+#
+SHOBJ_CC = gcc -mno-cygwin
+SHOBJ_CFLAGS =
+DLLWRAP = dllwrap
+DLLTOOL = dlltool
+
+SHOBJ_LIBS = 
+SHLIB_LIBS =
+
+# For libraries which include headers from other libraries.
+INCLUDES = -I$(winsrcdir) -I$(srcdir) -I$(includedir)
+
+CCFLAGS = $(DEFS) $(LOCAL_DEFS) $(CPPFLAGS) $(INCLUDES) $(LOCAL_CFLAGS) $(CFLAGS)
+
+.SUFFIXES:	.so
+
+.c.so:
+	$(RM) $@
+	$(SHOBJ_CC) -c $(CCFLAGS) $(SHOBJ_CFLAGS) -o $*.so $< 
+#	$(MV) $*.o $@
+
+# The name of the main library target.
+
+IMPORT_GDBM = libgdbm.a
+EXPORT_GDBM = gdbm.dll
+SHARED_LIBS = $(EXPORT_GDBM) $(IMPORT_GDBM)
+
+# The C code source files for this library.
+SRCS =	$(srcdir)/bucket.c $(srcdir)/close.c $(srcdir)/dbmclose.c \
+	$(srcdir)/dbmdelete.c $(srcdir)/dbmdirfno.c $(srcdir)/dbmfetch.c \
+	$(srcdir)/dbminit.c $(srcdir)/dbmopen.c $(srcdir)/dbmpagfno.c \
+	$(srcdir)/dbmrdonly.c $(srcdir)/dbmseq.c $(srcdir)/dbmstore.c \
+	$(srcdir)/delete.c $(srcdir)/falloc.c $(srcdir)/fetch.c \
+	$(srcdir)/findkey.c $(srcdir)/gdbmclose.c $(srcdir)/gdbmdelete.c \
+	$(srcdir)/gdbmerrno.c $(srcdir)/gdbmexists.c $(srcdir)/gdbmfdesc.c \
+	$(srcdir)/gdbmfetch.c $(srcdir)/gdbmopen.c $(srcdir)/gdbmreorg.c \
+	$(srcdir)/gdbmseq.c $(srcdir)/gdbmsetopt.c $(srcdir)/gdbmstore.c \
+	$(srcdir)/gdbmsync.c $(srcdir)/global.c $(srcdir)/hash.c \
+	$(srcdir)/seq.c $(srcdir)/store.c $(srcdir)/update.c \
+	$(srcdir)/version.c $(winsrcdir)/win32.c
+
+# The header files for this library.
+HDRS =	$(srcdir)/dbm.h $(srcdir)/extern.h $(srcdir)/gdbmconst.h \
+	$(srcdir)/gdbmdefs.h $(srcdir)/gdbmerrno.h $(srcdir)/getopt.h \
+	$(srcdir)/ndbm.h $(srcdir)/proto.h $(srcdir)/systems.h \
+	$(winsrcdir)/gdbm.h $(winsrcdir)/autoconf.h
+
+OBJS =	bucket.so close.so dbmclose.so dbmdelete.so dbmdirfno.so \
+	dbmfetch.so dbminit.so dbmopen.so dbmpagfno.so dbmrdonly.so \
+	dbmseq.so dbmstore.so delete.so falloc.so fetch.so findkey.so \
+	gdbmclose.so gdbmdelete.so gdbmerrno.so gdbmexists.so \
+	gdbmfdesc.so gdbmfetch.so gdbmopen.so gdbmreorg.so gdbmseq.so \
+	gdbmsetopt.so gdbmstore.so gdbmsync.so global.so hash.so \
+	seq.so store.so update.so version.so win32.so
+
+INSTALLED_HEADERS = dbm.h ndbm.h gdbm.h
+
+##########################################################################
+
+all: $(SHARED_LIBS)
+
+supported: $(SHARED_LIBS)
+
+$(EXPORT_GDBM) $(IMPORT_GDBM):	$(OBJS)
+	$(RM) $@
+	$(SHOBJ_CC) -shared -o $@ $(OBJS) -Wl,--out-implib=$(IMPORT_GDBM) $(SHLIB_LIBS)
+
+install: installdirs $(SHARED_LIBS)
+	$(INSTALL_DATA) $(srcdir)/dbm.h $(includedir)
+	$(INSTALL_DATA) $(srcdir)/ndbm.h $(includedir)
+	$(INSTALL_DATA) $(winsrcdir)/gdbm.h $(includedir)
+	$(INSTALL_PROGRAM) gdbm.dll $(bindir)
+	$(INSTALL_DATA) libgdbm.a $(libdir)
+
+installdirs:
+	-test -n "$(includedir)" && -test -d $(includedir) || \
+		mkdir -p $(includedir)
+	-test -n "$(libdir)" && -test -d $(libdir) || \
+		mkdir -p $(libdir)
+	-test -n "$(bindir)" && -test -d $(bindir) || \
+		mkdir -p $(bindir)
+
+uninstall:
+	-test -n "$(includedir)" && cd $(includedir) && \
+		$(RM) $(INSTALLED_HEADERS)
+	-test -n "$(libdir)" && cd $(libdir) && \
+		$(RM) libgdbm.a libgdbm.old $(SHARED_LIBS)
+	-test -n "$(bindir)" && cd $(bindir) && \
+		$(RM) gdbm.dll
+
+clean mostlyclean:	force
+	$(RM) $(OBJS) $(SHARED_LIBS) *~
+
+force:
+
+# Tell versions [3.59,3.63) of GNU make not to export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
+
+## depends (FIX ME!!!)
+bucket.so: $(srcdir)/bucket.c $(winsrcdir)/autoconf.h
+close.so: $(srcdir)/close.c $(winsrcdir)/autoconf.h
+dbmclose.so: $(srcdir)/dbmclose.c $(winsrcdir)/autoconf.h
+dbmdelete.so: $(srcdir)/dbmdelete.c $(winsrcdir)/autoconf.h
+dbmdirfno.so: $(srcdir)/dbmdirfno.c $(winsrcdir)/autoconf.h
+dbmfetch.so: $(srcdir)/dbmfetch.c $(winsrcdir)/autoconf.h
+dbminit.so: $(srcdir)/dbminit.c $(winsrcdir)/autoconf.h
+dbmopen.so: $(srcdir)/dbmopen.c $(winsrcdir)/autoconf.h
+dbmpagfno.so: $(srcdir)/dbmpagfno.c $(winsrcdir)/autoconf.h
+dbmrdonly.so: $(srcdir)/dbmrdonly.c $(winsrcdir)/autoconf.h
+dbmseq.so: $(srcdir)/dbmseq.c $(winsrcdir)/autoconf.h
+dbmstore.so: $(srcdir)/dbmstore.c $(winsrcdir)/autoconf.h
+delete.so: $(srcdir)/delete.c $(winsrcdir)/autoconf.h
+falloc.so: $(srcdir)/falloc.c $(winsrcdir)/autoconf.h
+fetch.so: $(srcdir)/fetch.c $(winsrcdir)/autoconf.h
+findkey.so: $(srcdir)/findkey.c $(winsrcdir)/autoconf.h
+gdbmclose.so: $(srcdir)/gdbmclose.c $(winsrcdir)/autoconf.h
+gdbmdelete.so: $(srcdir)/gdbmdelete.c $(winsrcdir)/autoconf.h
+gdbmerrno.so: $(srcdir)/gdbmerrno.c $(winsrcdir)/autoconf.h
+gdbmexists.so: $(srcdir)/gdbmexists.c $(winsrcdir)/autoconf.h
+gdbmfdesc.so: $(srcdir)/gdbmfdesc.c $(winsrcdir)/autoconf.h
+gdbmfetch.so: $(srcdir)/gdbmfetch.c $(winsrcdir)/autoconf.h
+gdbmopen.so: $(srcdir)/gdbmopen.c $(winsrcdir)/autoconf.h
+gdbmreorg.so: $(srcdir)/gdbmreorg.c $(winsrcdir)/autoconf.h
+gdbmseq.so: $(srcdir)/gdbmseq.c $(winsrcdir)/autoconf.h
+gdbmsetopt.so: $(srcdir)/gdbmsetopt.c $(winsrcdir)/autoconf.h
+gdbmstore.so: $(srcdir)/gdbmstore.c $(winsrcdir)/autoconf.h
+gdbmsync.so: $(srcdir)/gdbmsync.c $(winsrcdir)/autoconf.h
+global.so: $(srcdir)/global.c $(winsrcdir)/autoconf.h
+hash.so: $(srcdir)/hash.c $(winsrcdir)/autoconf.h
+seq.so: $(srcdir)/seq.c $(winsrcdir)/autoconf.h
+store.so: $(srcdir)/store.c $(winsrcdir)/autoconf.h
+update.so: $(srcdir)/update.c $(winsrcdir)/autoconf.h
+version.so: $(srcdir)/version.c $(winsrcdir)/autoconf.h
+win32.so: $(winsrcdir)/win32.c $(winsrcdir)/autoconf.h
diff -Nbur gdbm-1.8.3.orig/win32/shlib/Makefile gdbm-1.8.3/win32/shlib/Makefile
--- gdbm-1.8.3.orig/win32/shlib/Makefile	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/shlib/Makefile	Wed Apr 16 14:08:13 2003
@@ -0,0 +1,186 @@
+# Makefile of GDBM for VC++ and BCC
+srcdir = ../..
+winsrcdir = ..
+
+INSTALL = copy
+INSTALL_PROGRAM = $(INSTALL)
+INSTALL_DATA = $(INSTALL)
+
+!ifdef __MAKE__
+CC = bcc32 -q
+AR = tlib
+ARFLAGS = /a
+MAKE = make
+CFLAGS = -O2 -w-
+LOCAL_CFLAGS = 
+CPPFLAGS = 
+SHOBJ_CC = bcc32
+SHOBJ_CFLAGS = -tWD -lw-exp
+OUTFLAG = -e
+MAKE_IMPORT_LIB = implib
+!else
+CC = cl -nologo
+AR = lib
+ARFLAGS = -out:
+MAKE = nmake
+CFLAGS = -MD
+LOCAL_CFLAGS =
+CPPFLAGS = 
+SHOBJ_CC = cl -nologo
+SHOBJ_CFLAGS = -LD
+OUTFLAG = -Fe
+MAKE_IMPORT_LIB = @echo
+!endif
+
+RM = del
+CP = copy
+MV = mv
+
+!ifndef prefix
+prefix = /usr/local
+!endif
+exec_prefix = $(prefix)
+
+bindir = $(exec_prefix)/bin
+libdir = $(exec_prefix)/lib
+mandir = $(prefix)/man
+includedir = $(prefix)/include
+
+infodir = $(prefix)/info
+
+man3dir = $(mandir)/man3
+
+
+DEFS =
+LOCAL_DEFS = -DBUILDING_DLL
+
+# For libraries which include headers from other libraries.
+INCLUDES = -I$(winsrcdir) -I$(srcdir) -I$(includedir)
+
+CCFLAGS = $(DEFS) $(LOCAL_DEFS) $(CPPFLAGS) $(INCLUDES:/=\) $(LOCAL_CFLAGS) $(CFLAGS)
+
+.c.obj:
+	$(CC) -c $(CCFLAGS) $<
+
+{$(winsrcdir)}.c.obj:
+	$(CC) -c $(CCFLAGS) $<
+
+{$(srcdir)}.c.obj:
+	$(CC) -c $(CCFLAGS) $<
+
+# The name of the main library target.
+IMPORT_GDBM = gdbm.lib
+EXPORT_GDBM = gdbm.dll
+SHARED_LIBS = $(IMPORT_GDBM) $(EXPORT_GDBM)
+
+# The C code source files for this library.
+SRCS =	$(srcdir)/bucket.c $(srcdir)/close.c $(srcdir)/dbmclose.c \
+	$(srcdir)/dbmdelete.c $(srcdir)/dbmdirfno.c $(srcdir)/dbmfetch.c \
+	$(srcdir)/dbminit.c $(srcdir)/dbmopen.c $(srcdir)/dbmpagfno.c \
+	$(srcdir)/dbmrdonly.c $(srcdir)/dbmseq.c $(srcdir)/dbmstore.c \
+	$(srcdir)/delete.c $(srcdir)/falloc.c $(srcdir)/fetch.c \
+	$(srcdir)/findkey.c $(srcdir)/gdbmclose.c $(srcdir)/gdbmdelete.c \
+	$(srcdir)/gdbmerrno.c $(srcdir)/gdbmexists.c $(srcdir)/gdbmfdesc.c \
+	$(srcdir)/gdbmfetch.c $(srcdir)/gdbmopen.c $(srcdir)/gdbmreorg.c \
+	$(srcdir)/gdbmseq.c $(srcdir)/gdbmsetopt.c $(srcdir)/gdbmstore.c \
+	$(srcdir)/gdbmsync.c $(srcdir)/global.c $(srcdir)/hash.c \
+	$(srcdir)/seq.c $(srcdir)/store.c $(srcdir)/update.c \
+	$(srcdir)/version.c $(winsrcdir)/win32.c
+
+HDRS =	$(srcdir)/dbm.h $(srcdir)/extern.h $(srcdir)/gdbmconst.h \
+	$(srcdir)/gdbmdefs.h $(srcdir)/gdbmerrno.h $(srcdir)/getopt.h \
+	$(srcdir)/ndbm.h $(srcdir)/proto.h $(srcdir)/systems.h \
+	$(winsrcdir)/gdbm.h $(winsrcdir)/autoconf.h
+
+OBJS =	gdbm.obj bucket.obj close.obj dbmclose.obj dbmdelete.obj dbmdirfno.obj \
+	dbmfetch.obj dbminit.obj dbmopen.obj dbmpagfno.obj dbmrdonly.obj \
+	dbmseq.obj dbmstore.obj delete.obj falloc.obj fetch.obj findkey.obj \
+	gdbmclose.obj gdbmdelete.obj gdbmerrno.obj gdbmexists.obj \
+	gdbmfdesc.obj gdbmfetch.obj gdbmopen.obj gdbmreorg.obj gdbmseq.obj \
+	gdbmsetopt.obj gdbmstore.obj gdbmsync.obj global.obj hash.obj \
+	seq.obj store.obj update.obj version.obj win32.obj
+
+INSTALLED_HEADERS = dbm.h ndbm.h gdbm.h
+
+##########
+
+all: $(SHARED_LIBS)
+
+$(IMPORT_GDBM): $(EXPORT_GDBM)
+
+$(EXPORT_GDBM): $(OBJS)
+	$(SHOBJ_CC) $(SHOBJ_CFLAGS) $(OBJS) $(SHOBJ_LIBS) -Fe$@
+	$(MAKE_IMPORT_LIB) $(IMPORT_GDBM) $@
+
+force: nul
+
+install: installdirs $(SHARED_LIBS)
+	$(INSTALL_PROGRAM) $(EXPORT_GDBM) $(bindir:/=\) /Y >nul
+	$(INSTALL_DATA) $(IMPORT_GDBM) $(libdir:/=\) /Y >nul
+	$(INSTALL_DATA) $(srcdir:/=\)\dbm.h $(includedir:/=\) /y >nul
+	$(INSTALL_DATA) $(srcdir:/=\)\ndbm.h $(includedir:/=\) /y >nul
+	$(INSTALL_DATA) $(winsrcdir:/=\)\gdbm.h $(includedir:/=\) /y >nul
+
+installdirs:
+	-if not exist $(includedir:/=\)\nul mkdir $(includedir:/=\)
+	-if not exist $(libdir:/=\)\nul mkdir $(libdir:/=\)
+	-if not exist $(bindir:/=\)\nul mkdir $(bindir:/=\)
+
+uninstall:
+	for %i in ($(INSTALLED_HEADERS)) do @del $(includedir:/=\)\%i >nul
+	cd $(bindir:/=\)
+	$(RM) $(EXPORT_GDBM)
+	cd $(libdir:/=\)
+	$(RM) $(IMPORT_GDBM)
+
+TAGS:	force
+	$(ETAGS) $(CSOURCES) $(HSOURCES)
+
+clean:	force
+	if exist *.obj $(RM) *.obj
+	if exist *.exp $(RM) *.exp
+	if exist *.tds $(RM) *.tds
+	if exist *~ $(RM) *~
+	if exist gdbm.c $(RM) gdbm.c
+	for %i in ($(SHARED_LIBS)) do @if exist %i $(RM) %i
+
+gdbm.obj: gdbm.c
+gdbm.c:
+	touch gdbm.c
+
+## depends (FIX ME!!!)
+bucket.obj: {$(srcdir)}bucket.c {$(winsrcdir)}autoconf.h
+close.obj: {$(srcdir)}close.c {$(winsrcdir)}autoconf.h
+dbmclose.obj: {$(srcdir)}dbmclose.c {$(winsrcdir)}autoconf.h
+dbmdelete.obj: {$(srcdir)}dbmdelete.c {$(winsrcdir)}autoconf.h
+dbmdirfno.obj: {$(srcdir)}dbmdirfno.c {$(winsrcdir)}autoconf.h
+dbmfetch.obj: {$(srcdir)}dbmfetch.c {$(winsrcdir)}autoconf.h
+dbminit.obj: {$(srcdir)}dbminit.c {$(winsrcdir)}autoconf.h
+dbmopen.obj: {$(srcdir)}dbmopen.c {$(winsrcdir)}autoconf.h
+dbmpagfno.obj: {$(srcdir)}dbmpagfno.c {$(winsrcdir)}autoconf.h
+dbmrdonly.obj: {$(srcdir)}dbmrdonly.c {$(winsrcdir)}autoconf.h
+dbmseq.obj: {$(srcdir)}dbmseq.c {$(winsrcdir)}autoconf.h
+dbmstore.obj: {$(srcdir)}dbmstore.c {$(winsrcdir)}autoconf.h
+delete.obj: {$(srcdir)}delete.c {$(winsrcdir)}autoconf.h
+falloc.obj: {$(srcdir)}falloc.c {$(winsrcdir)}autoconf.h
+fetch.obj: {$(srcdir)}fetch.c {$(winsrcdir)}autoconf.h
+findkey.obj: {$(srcdir)}findkey.c {$(winsrcdir)}autoconf.h
+gdbmclose.obj: {$(srcdir)}gdbmclose.c {$(winsrcdir)}autoconf.h
+gdbmdelete.obj: {$(srcdir)}gdbmdelete.c {$(winsrcdir)}autoconf.h
+gdbmerrno.obj: {$(srcdir)}gdbmerrno.c {$(winsrcdir)}autoconf.h
+gdbmexists.obj: {$(srcdir)}gdbmexists.c {$(winsrcdir)}autoconf.h
+gdbmfdesc.obj: {$(srcdir)}gdbmfdesc.c {$(winsrcdir)}autoconf.h
+gdbmfetch.obj: {$(srcdir)}gdbmfetch.c {$(winsrcdir)}autoconf.h
+gdbmopen.obj: {$(srcdir)}gdbmopen.c {$(winsrcdir)}autoconf.h
+gdbmreorg.obj: {$(srcdir)}gdbmreorg.c {$(winsrcdir)}autoconf.h
+gdbmseq.obj: {$(srcdir)}gdbmseq.c {$(winsrcdir)}autoconf.h
+gdbmsetopt.obj: {$(srcdir)}gdbmsetopt.c {$(winsrcdir)}autoconf.h
+gdbmstore.obj: {$(srcdir)}gdbmstore.c {$(winsrcdir)}autoconf.h
+gdbmsync.obj: {$(srcdir)}gdbmsync.c {$(winsrcdir)}autoconf.h
+global.obj: {$(srcdir)}global.c {$(winsrcdir)}autoconf.h
+hash.obj: {$(srcdir)}hash.c {$(winsrcdir)}autoconf.h
+seq.obj: {$(srcdir)}seq.c {$(winsrcdir)}autoconf.h
+store.obj: {$(srcdir)}store.c {$(winsrcdir)}autoconf.h
+update.obj: {$(srcdir)}update.c {$(winsrcdir)}autoconf.h
+version.obj: {$(srcdir)}version.c {$(winsrcdir)}autoconf.h
+win32.obj: {$(winsrcdir)}win32.c {$(winsrcdir)}autoconf.h
diff -Nbur gdbm-1.8.3.orig/win32/win32.c gdbm-1.8.3/win32/win32.c
--- gdbm-1.8.3.orig/win32/win32.c	Thu Jan  1 00:00:00 1970
+++ gdbm-1.8.3/win32/win32.c	Wed Apr 16 05:10:11 2003
@@ -0,0 +1,147 @@
+/*
+ * fsync and link emulation for windows
+ *
+ * this part is public domain.
+ */
+#include <windows.h>
+#include <errno.h>
+#include <limits.h>
+
+int fsync(int fd)
+{
+    return !FlushFileBuffers((HANDLE)_get_osfhandle(fd));
+}
+
+int link(const char *src, const char *dst)
+{
+    return !CopyFile(src, dst, TRUE);
+}
+
+/*
+ * flock support code for windows
+ *
+ * This code is derived from ruby (http://www.ruby-lang.org/).
+ * Original copyright notice is below.
+ */
+/*
+ *  Copyright (c) 1993, Intergraph Corporation
+ *
+ *  You may distribute under the terms of either the GNU General Public
+ *  License or the Artistic License, as specified in the perl README file.
+ *
+ *  Various Unix compatibility functions and NT specific functions.
+ *
+ *  Some of this code was derived from the MSDOS port(s) and the OS/2 port.
+ *
+ */
+
+DWORD Win32System = (DWORD)-1;
+
+static DWORD
+IdOS(void)
+{
+    static OSVERSIONINFO osver;
+
+    if (osver.dwPlatformId != Win32System) {
+	memset(&osver, 0, sizeof(OSVERSIONINFO));
+	osver.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
+	GetVersionEx(&osver);
+	Win32System = osver.dwPlatformId;
+    }
+    return (Win32System);
+}
+
+static int 
+IsWin95(void) {
+    return (IdOS() == VER_PLATFORM_WIN32_WINDOWS);
+}
+
+static int
+IsWinNT(void) {
+    return (IdOS() == VER_PLATFORM_WIN32_NT);
+}
+
+#define LOCK_SH 1
+#define LOCK_EX 2
+#define LOCK_NB 4
+#define LOCK_UN 8
+#ifndef EWOULDBLOCK
+#define EWOULDBLOCK 10035 /* EBASEERR + 35 (winsock.h) */
+#endif
+
+#define LK_ERR(f,i) ((f) ? (i = 0) : (errno = GetLastError() == ERROR_LOCK_VIOLATION ? EWOULDBLOCK : EACCES))
+#define LK_LEN      ULONG_MAX
+
+static int
+flock_winnt(HANDLE fh, int oper)
+{
+    OVERLAPPED o;
+    int i = -1;
+
+    memset(&o, 0, sizeof(o));
+
+    switch(oper) {
+      case LOCK_SH:		/* shared lock */
+	LK_ERR(LockFileEx(fh, 0, 0, LK_LEN, LK_LEN, &o), i);
+	break;
+      case LOCK_EX:		/* exclusive lock */
+	LK_ERR(LockFileEx(fh, LOCKFILE_EXCLUSIVE_LOCK, 0, LK_LEN, LK_LEN, &o), i);
+	break;
+      case LOCK_SH|LOCK_NB:	/* non-blocking shared lock */
+	LK_ERR(LockFileEx(fh, LOCKFILE_FAIL_IMMEDIATELY, 0, LK_LEN, LK_LEN, &o), i);
+	break;
+      case LOCK_EX|LOCK_NB:	/* non-blocking exclusive lock */
+	LK_ERR(LockFileEx(fh,
+			  LOCKFILE_EXCLUSIVE_LOCK|LOCKFILE_FAIL_IMMEDIATELY,
+			  0, LK_LEN, LK_LEN, &o), i);
+	break;
+      case LOCK_UN:		/* unlock lock */
+	LK_ERR(UnlockFileEx(fh, 0, LK_LEN, LK_LEN, &o), i);
+	break;
+      default:            /* unknown */
+	errno = EINVAL;
+	break;
+    }
+    return i;
+}
+
+static int
+flock_win95(HANDLE fh, int oper)
+{
+    int i = -1;
+
+    switch(oper) {
+      case LOCK_EX:
+	do {
+	    LK_ERR(LockFile(fh, 0, 0, LK_LEN, LK_LEN), i);
+	} while (i && errno == EWOULDBLOCK);
+	break;
+      case LOCK_EX|LOCK_NB:
+	LK_ERR(LockFile(fh, 0, 0, LK_LEN, LK_LEN), i);
+	break;
+      case LOCK_UN:
+	LK_ERR(UnlockFile(fh, 0, 0, LK_LEN, LK_LEN), i);
+	break;
+      default:
+	errno = EINVAL;
+	break;
+    }
+    return i;
+}
+
+#undef LK_ERR
+
+int
+flock(int fd, int oper)
+{
+    static int (*locker)(HANDLE, int) = NULL;
+
+    if (!locker) {
+	if (IsWinNT())
+	    locker = flock_winnt;
+	else
+	    locker = flock_win95;
+    }
+
+    return locker((HANDLE)_get_osfhandle(fd), oper);
+}
